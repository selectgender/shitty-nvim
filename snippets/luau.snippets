snippet ?
  if ${1:true} then
    ${0}
  end
snippet !
	if not ${1:true} then
		${0}
	end
snippet |
	if ${1:true} then
		${2}
	else
		${0}
	end
snippet \
	if ${1:true} then
		${2}
	elseif ${3:false} then
		${0}
	end
snippet M
	local ${1:M} = {}

	${1}.${2:new} = function(${3:props})
		${0}
	end

	return ${1}
snippet f
	function ${1}(${2:props})
		${0}
	end
snippet i
	for ${1:i} = ${2}, ${3} do
		${0}
	end
snippet pairs
	for ${1:_}, ${2:value} in pairs(${3}) do
		${0}
	end
snippet ipairs
	for ${1:_}, ${2:value} in ipairs(${3}) do
		${0}
	end
snippet w
	while ${1:true} do
		${0}
	end
snippet r 
	return ${0}
snippet q
	require("${1}")${0}
snippet l
	local 
snippet p
	print("${0}")
snippet =
  ${1:var} = ${0}
snippet t
	type ${1:t} = {
		${0}
	}
snippet C "Stands for Class"
	local ${1:class} = {}
	${1}.__index = ${1}

	function ${1}.new(${2:props})
  	local self = setmetatable({}, ${1})

		${3}

  	return self
	end

	function ${1}:${4:Method}(${5:props})
		${0}
	end

	return ${1}
snippet NS "Stands for Nevermore Service"
	--[=[
		${1:Class Description}

		@class ${2:Service}	
	]=]

  local require = require(script.Parent.loader).load(script)
  
  local ${2} = {}
  ${2}.ServiceName = "${2}"

  function ${2}:Init(serviceBag)
    assert(not self._serviceBag, "Already initialized")
    self._serviceBag = assert(serviceBag, "No serviceBag")

    -- External
    ${3}
  end

  function ${2}:Start()
    ${0}
  end

  return ${2}
snippet MC "Stands for Moonwave Comment"
	--[=[
		${1:Method Description}

		@param ${2:param} ${3:type}
		@return ${4:type}
	]=]
	${0}
