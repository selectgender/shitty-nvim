extends lua

snippet t
	type ${1:t} = {
		${0}
	}
snippet C "Stands for Class"
	local ${1:class} = {}
	${1}.__index = ${1}

	function ${1}.new(${2:props})
  	local self = setmetatable({}, ${1})

		${3}

  	return self
	end

	function ${1}:${4:Method}(${5:props})
		${0}
	end

	return ${1}
snippet NS "Stands for Nevermore Service"
	--[=[
		${1:Class Description}

		@class ${2:Service}	
	]=]

  local require = require(script.Parent.loader).load(script)
  
  local ${2} = {}
  ${2}.ServiceName = "${2}"

  function ${2}:Init(serviceBag)
    assert(not self._serviceBag, "Already initialized")
    self._serviceBag = assert(serviceBag, "No serviceBag")

    -- External
    ${3}
  end

  function ${2}:Start()
    ${0}
  end

  return ${2}
snippet NB "Stands for Nevermore Binder"
	--[=[
		${1:Class Description}

		@class ${2:Service}	
	]=]

	local require = require(script.Parent.loader).load(script)

	local BaseObject = require("BaseObject")
	local Binder = require("Binder")

	local ${2} = setmetatable({}, BaseObject)
	${2}.__index = ${2}

	function ${2}.new(instance, serviceBag)
		local self = setmetatable(BaseObject.new(instance), ${2})

		self._serviceBag = assert(serviceBag, "No serviceBag")

		return self
	end

	return Binder.new("${2}", ${2})
snippet MC "Stands for Moonwave Comment"
	--[=[
		${1:Method Description}

		@param ${2:param} ${3:type}
		@return ${4:type}
	]=]
	${0}
